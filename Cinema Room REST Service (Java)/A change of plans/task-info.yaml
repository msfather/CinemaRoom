type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.context.annotation.ComponentScan;

    @SpringBootApplication
    // @Configuration, @EnableAutoConfiguration and
    // @ComponentScan->scan a all project like when package name is cinema scan a cinema only

    public class Main {
        public static void main(String[] args) {

            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
    }
  learner_created: false
- name: src/cinema/controller/SeatController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.models.room;
    import cinema.services.RoomService;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class SeatController {
        private final RoomService roomService;

        public SeatController(RoomService roomService) {
            this.roomService = roomService;
        }

        @GetMapping("/seats")
        public room getRoom() {
            return roomService.getRoom();
        }
    }
  learner_created: false
- name: src/cinema/models/seat.java
  visible: true
  text: |
    package cinema.models;

    import lombok.AllArgsConstructor;
    import lombok.Data;

    @Data
    @AllArgsConstructor
    public class seat {
        private int row;
        private int column;
    }
  learner_created: false
- name: src/cinema/models/room.java
  visible: true
  text: |
    package cinema.models;

    import lombok.Data;

    import java.util.List;

    @Data
    public class room {
        private int total_rows;
        private int total_columns;
        private List<seat> available_seats;

        public room(int total_rows, int total_columns, List<seat> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = available_seats;
        }
    }
  learner_created: false
- name: src/cinema/services/RoomService.java
  visible: true
  text: |
    package cinema.services;

    import cinema.models.room;
    import cinema.models.seat;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class RoomService {

        public static final int ROOM_END = 9;
        public static final int ROOM_START = 1;

        public room getRoom() {
            List<seat> available_seats = new ArrayList<>();
            for (int r = ROOM_START; r <= ROOM_END; r++) {
                for (int c = ROOM_START; c <= ROOM_END; c++) {
                    available_seats.add(new seat(r, c));
                }
            }
            return new room(ROOM_END, ROOM_END, available_seats);
        }
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/models/seat_purchase.java
  visible: true
  text: |
    package cinema.models;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    public class seat_purchase {
        private UUID token;
        private seat_price ticket;
        public seat_purchase(UUID token,seat_price ticket) {
            this.token = token;
            this.ticket = ticket;
        }


        public seat_price getTicket() {
            return ticket;
        }



        public void setTicket(seat_price ticket) {
            this.ticket = ticket;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/services/RoomService_price.java
  visible: true
  text: |+
    package cinema.services;

    import cinema.models.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    @Service
    public class RoomService_price {
        public static final int ROOM_END = 9;
        public static final int ROOM_START = 9;
        public static final int PRICE_SEAT = 10;
        public static final int PRICE_SEAT1 = 8;
        List<seat_price> available_seats = new ArrayList<>();
        List<Boolean> check = new ArrayList<>();
        List<room_token>token=new ArrayList<>();
        public RoomService_price(){
            for (int r = 1; r <= ROOM_END; r++) {
                for (int c = 1; c <= ROOM_END; c++) {
                    if (r <= 4)
                        available_seats.add(new seat_price(r, c, PRICE_SEAT));
                    else
                        available_seats.add(new seat_price(r, c, PRICE_SEAT1));
                    check.add(false);
                    token.add(new room_token(UUID.randomUUID()));
                }
            }
        }
        public room_price getRoom_price() {
            return new room_price(ROOM_START, ROOM_END, available_seats);
        }
        public seat_price get_roo_price(seat s) throws ResponseStatusException {

            for (int i = 0; i < available_seats.size(); i++) {
                if (s.getRow() == available_seats.get(i).getRow() && s.getColumn() == available_seats.get(i).getColumn() && check.get(i) == false) {
                    check.set(i, true);
                    return available_seats.get(i);
                }
            }
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "xyz");

        }

        public boolean checkBounds(seat s) {
            return s.getRow() <= ROOM_END && s.getRow() >= 1 && s.getColumn() <= ROOM_END && s.getColumn() >= 1;
        }
        public seat_purchase get_room_price(seat s) {
            for (int i = 0; i < available_seats.size(); i++) {
                if (s.getRow() == available_seats.get(i).getRow() && s.getColumn() == available_seats.get(i).getColumn()&&check.get(i) == false) {
                    token.set(i,new room_token(UUID.randomUUID()));
                    check.set(i, true);
                    return new seat_purchase(token.get(i).getToken(),available_seats.get(i));
                }
            }
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "xyz");
        }

        public returned_ticket get_room_token(room_token s) {

            for (int i=0;i<token.size();i++){
                if(token.get(i).getToken().equals(s.getToken())&&check.get(i)==true){
                    check.set(i, false);
                  return new returned_ticket(available_seats.get(i));
                }
            }
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "xyz");
        }
    }

  learner_created: true
- name: src/cinema/models/room_price.java
  visible: true
  text: |
    package cinema.models;

    import lombok.Data;

    import java.util.List;
    public class room_price {
        private int total_rows;
        private int total_columns;
        private List<seat_price> available_seats;

        public room_price(int total_rows, int total_columns, List<seat_price> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = available_seats;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<seat_price> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<seat_price> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/models/room_token.java
  visible: true
  text: |
    package cinema.models;

    import lombok.Data;

    import java.util.UUID;

    public class room_token {
        private UUID token;

        public UUID getToken() {
            return token;
        }
        public room_token() {
        }
        public room_token(UUID token) {
            this.token = token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/models/returned_ticket.java
  visible: true
  text: |
    package cinema.models;

    import java.util.ArrayList;
    import java.util.List;

    public class returned_ticket {
        seat_price returned_ticket;

        public seat_price getReturned_ticket() {
            return returned_ticket;
        }

        public returned_ticket(seat_price returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public void setReturned_ticket(seat_price returned_ticket) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/models/seat_price.java
  visible: true
  text: |
    package cinema.models;

    public class seat_price {
        private int row;
        private int column;
        private int price;


        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public seat_price(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price=price;
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 21 Apr 2023 06:46:14 UTC"
record: 3
